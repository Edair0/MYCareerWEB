@page "/Attributes"

<h3>Attributes</h3>
<hr/>



@*<div class="container">
    <div class="row">
        <div class="col">
            Driving Layup: @StatsOffense[Offense.DrivingLayup]
            <button class="btn btn-sm" @onclick="IncrementOffense">+</button>
            <button class="btn btn-sm" @onclick="DecreaseOffense">-</button>
        </div>
        <div class="col">
            Driving Layup: @StatsOffense[Offense.DrivingLayup]
            <button class="btn btn-sm" @onclick="IncrementOffense">+</button>
            <button class="btn btn-sm" @onclick="DecreaseOffense">-</button>
        </div>
        <div class="col">
            Driving Layup: @StatsOffense[Offense.DrivingLayup]
            <button class="btn btn-sm" @onclick="IncrementOffense">+</button>
            <button class="btn btn-sm" @onclick="DecreaseOffense">-</button>
        </div>
    </div>
</div>*@

@for (int i = 0; i < StatsOffense.Count; i++)
{
    <div class="container">
        <div class="row">
            <div class="col">
                @if (i < StatsOffense.Count)
                {
                    int statid = i;
                    <div class="container">
                        <div class="row flex-nowrap">
                            <div class="col">
                                <label class="text-nowrap">@Enum.GetName(typeof(Offense), i): @StatsOffense[i]</label>
                            </div>
                            <div class="col">
                                <div class="btn-group" role="group" aria-label="Basic example">
                                    <button class="btn btn-secondary" @onclick="@(e => ChangeStat(0, statid, 1))">+</button>
                                    <button class="btn btn-secondary" @onclick="@(e => ChangeStat(0, statid, -1))">-</button>
                                </div>
                            </div>
                        </div>
                    </div>   
                }
            </div>
            <div class="col">
                @if (i < StatsDefense.Count)
                {
                    int statid = i;
                    <div class="container">
                        <div class="row flex-nowrap">
                            <div class="col">
                                <label class="text-nowrap">@Enum.GetName(typeof(Defense), i): @StatsDefense[i]</label>
                            </div>
                            <div class="col">
                                <div class="btn-group" role="group" aria-label="Basic example">
                                    <button class="btn btn-secondary" @onclick="@(e => ChangeStat(1, statid, 1))">+</button>
                                    <button class="btn btn-secondary" @onclick="@(e => ChangeStat(1, statid, -1))">-</button>
                                </div>
                            </div>
                        </div>
                    </div>   
                }
            </div>
            <div class="col">
                @if (i < StatsAthleticism.Count)
                {
                    int statid = i;
                    <div class="container">
                        <div class="row flex-nowrap">
                            <div class="col">
                                <label class="text-nowrap">@Enum.GetName(typeof(Athleticism), i): @StatsAthleticism[i]</label>
                            </div>
                            <div class="col">
                                <div class="btn-group" role="group" aria-label="Basic example">
                                    <button class="btn btn-secondary" @onclick="@(e => ChangeStat(2, statid, 1))">+</button>
                                    <button class="btn btn-secondary" @onclick="@(e => ChangeStat(2, statid, -1))">-</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="col">
                @if (i < StatsMental.Count)
                {
                    int statid = i;
                    <div class="container">
                        <div class="row flex-nowrap">
                            <div class="col">
                                <label class="text-nowrap">@Enum.GetName(typeof(Mental), i): @StatsMental[i]</label>
                            </div>
                            <div class="col">
                                <div class="btn-group" role="group" aria-label="Basic example">
                                    <button class="btn btn-secondary" @onclick="@(e => ChangeStat(3, statid, 1))">+</button>
                                    <button class="btn btn-secondary" @onclick="@(e => ChangeStat(3, statid, -1))">-</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    private Dictionary<int, int> StatsOffense;
    private Dictionary<int, int> StatsDefense;
    private Dictionary<int, int> StatsAthleticism;
    private Dictionary<int, int> StatsMental;

    List<Todo> Todos { get; set; } = new List<Todo>
    {
        new Todo {Id = 1, Text = "Do this"},
        new Todo {Id = 2, Text = "And this"}
    };

    private class Todo
    {
        public int Id { get; set; }
        public string Text { get; set; }
    }

    enum Offense : int
    {
        DrivingLayup = 0,
        PostFade = 1,
        PostHook = 2,
        PostControl = 3,
        DrawFoul = 4,
        CloseShot = 5,
        MidRangeShot = 6,
        ThreePointShot = 7,
        FreeThrow = 8,
        BallHandle = 9,
        PassIQ = 10,
        PassAccuracy = 11,
        OffensiveRebound = 12,
        StandingDunk = 13,
        DrivingDunk = 14,
        ShotIQ = 15,
        PassVision = 16,
        Hands = 17
    }

    enum Defense : int
    {
        DefensiveRebound = 0,
        InteriorDefense = 1,
        PerimeterDefense = 2,
        Block = 3,
        Steal = 4,
        ShotContest = 5
    }

    enum Athleticism : int
    {
        LateralQuickness = 0,
        Speed = 1,
        SpeedWithBall = 2,
        Acceleration = 3,
        Vertical = 4,
        Strength = 5,
        Stamina = 6,
        Hustle = 7
    }

    enum Mental : int
    {
        PassPerception = 0,
        DefensiveConsistency = 1,
        HelpDefenseIQ = 2,
        OffensiveConsistency = 3,
        PickAndRollDefenseIQ = 4,
        Intangibles = 5
    }

    private Dictionary<int, int> LoadOffense()
    {
        Dictionary<int, int> result = new Dictionary<int, int>();
        foreach(int stat in Enum.GetValues(typeof(Offense)))
        {
            result.Add(stat, 55);
        }
        return result;
    }

    private Dictionary<int, int> LoadDefense()
    {
        Dictionary<int, int> result = new Dictionary<int, int>();
        foreach (int stat in Enum.GetValues(typeof(Defense)))
        {
            result.Add((int)stat, 50);
        }
        return result;
    }

    private Dictionary<int, int> LoadAthleticism()
    {
        Dictionary<int, int> result = new Dictionary<int, int>();
        foreach (int stat in Enum.GetValues(typeof(Athleticism)))
        {
            result.Add((int)stat, 50);
        }
        return result;
    }

    private Dictionary<int, int> LoadMental()
    {
        Dictionary<int, int> result = new Dictionary<int, int>();
        foreach (int stat in Enum.GetValues(typeof(Mental)))
        {
            result.Add((int)stat, 50);
        }
        return result;
    }

    private void ChangeStat(int type, int stat, int value)
    {
        if (type == 0)
        {
            StatsOffense[stat] += value;
        }         
        if (type == 1)
        {
            StatsDefense[stat] += value;
        }
        if (type == 2)
        {
            StatsAthleticism[stat] += value;
        }
        if (type== 3)
        {
            StatsMental[stat] += value;
        }
    }

    protected override void OnInitialized()
    {
        StatsOffense = LoadOffense();
        StatsDefense = LoadDefense();
        StatsAthleticism = LoadAthleticism();
        StatsMental = LoadMental();
        base.OnInitialized();
    }

}
