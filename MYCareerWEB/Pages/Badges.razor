@page "/Badges"
@using IndexedDB.Blazor
@using MYCareerWEB.Code;
@using MYCareerWEB.Code.PlayerData
@inject IIndexedDbFactory DbFactory

@if(AppData.CurrentPlayer != null)
{
    <div class="row row-cols-2 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 row-cols-xl-5 row-cols-xxl-5 g-1">
        <div class="col d-grid">
            <input type="radio" class="btn-check" name="options" id="option1" @onclick="() => ChangeBadgeGroup(1)">
            <label class="btn btn-secondary" for="option1">Inside Scoring</label>
        </div>
        <div class="col d-grid">
            <input type="radio" class="btn-check" name="options" id="option2" @onclick="() => ChangeBadgeGroup(2)">
            <label class="btn btn-secondary" for="option2">Outside Scoring</label>
        </div>
        <div class="col d-grid">
            <input type="radio" class="btn-check" name="options" id="option3" @onclick="() => ChangeBadgeGroup(3)">
            <label class="btn btn-secondary" for="option3">Playmaking</label>
        </div>
        <div class="col d-grid">
            <input type="radio" class="btn-check" name="options" id="option4" @onclick="() => ChangeBadgeGroup(4)">
            <label class="btn btn-secondary" for="option4">Defending</label>
        </div>
        <div class="col d-grid">
            <input type="radio" class="btn-check" name="options" id="option5" @onclick="() => ChangeBadgeGroup(5)">
            <label class="btn btn-secondary" for="option5">Athleticism Rebounding</label>
        </div>
    </div>
    <hr />

    if (SelectedGroup == 1)
    {
        <BadgesGroup BadgeNames="@InsideScoring" BadgeCost1="InsideScoringCost1" BadgeCost2="InsideScoringCost2" BadgeCost3="InsideScoringCost3" BadgeCost4="InsideScoringCost4" PlayerBadgeData="AppData.CurrentPlayer.Badges.InsideScoring"> </BadgesGroup>
    }
    if (SelectedGroup == 2)
    {
        <BadgesGroup BadgeNames="@OutsideScoring" BadgeCost1="OutsideScoringCost1" BadgeCost2="OutsideScoringCost2" BadgeCost3="OutsideScoringCost3" BadgeCost4="OutsideScoringCost4" PlayerBadgeData="AppData.CurrentPlayer.Badges.OutsideScoring"> </BadgesGroup>
    }
    if (SelectedGroup == 3)
    {
        <BadgesGroup BadgeNames="@Playmaking" BadgeCost1="PlaymakingCost1" BadgeCost2="PlaymakingCost2" BadgeCost3="PlaymakingCost3" BadgeCost4="PlaymakingCost4" PlayerBadgeData="AppData.CurrentPlayer.Badges.Playmaking"> </BadgesGroup>
    }
    if (SelectedGroup == 4)
    {
        <BadgesGroup BadgeNames="@Defending" BadgeCost1="DefendingCost1" BadgeCost2="DefendingCost2" BadgeCost3="DefendingCost3" BadgeCost4="DefendingCost4" PlayerBadgeData="AppData.CurrentPlayer.Badges.Defending"> </BadgesGroup>
    }
    if (SelectedGroup == 5)
    {
        <BadgesGroup BadgeNames="@AthleticismRebounding" BadgeCost1="AthleticismReboundingCost1" BadgeCost2="AthleticismReboundingCost2" BadgeCost3="AthleticismReboundingCost3" BadgeCost4="AthleticismReboundingCost4" PlayerBadgeData="AppData.CurrentPlayer.Badges.AthleticismRebounding"> </BadgesGroup>
    }
}

@code {
    private int SelectedGroup = 0;

    private string[] InsideScoring = { "Fearless Finisher", "Acrobat", "Tear Dropper", "Post Spin Technician", "Dropstepper", "Putback Boss",
    "Hook Specialist", "Posterizer", "Backdown Punisher", "Rise Up", "Giant Slayer", "Pro Touch", "Slithery Finisher", "Unstrippable",
    "Mouse In The House", "Limitless Takeoff", "Grace Under Pressure", "Fast Twitch" };

    private int[] InsideScoringCost1 = { 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000 };
    private int[] InsideScoringCost2 = { 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000 };
    private int[] InsideScoringCost3 = { 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000 };
    private int[] InsideScoringCost4 = { 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000 };

    private string[] OutsideScoring = { "Catch & Shoot", "Corner Specialist", "Difficult Shots", "Mismatch Expert", "Lucky Number 7", "Blinders",
    "Circus Threes", "Fade Ace", "Limitless Spot-Up", "Chef", "Rhythm Shooter", "Set Shooter", "Clutch Shooter", "Deadeye", "Sniper", "Stop & Pop", 
    "Green Machine", "Hot Zone Hunter", "Volume Shooter", "Slippery Off-Ball" };

    private int[] OutsideScoringCost1 = { 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000 };
    private int[] OutsideScoringCost2 = { 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000 };
    private int[] OutsideScoringCost3 = { 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000 };
    private int[] OutsideScoringCost4 = { 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000 };

    private string[] Playmaking = { "Ankle Breaker", "Hyperdrive", "Break Starter", "Glue Hands", "Dimer", "Quick Chain",
    "Bail Out", "Downhill", "Dream Shake", "Handles For Days", "Needle Threader", "Quick First Step", "Space Creator", "Stop & Go",
    "Tight Handles", "Unpluckable", "Bullet Passer", "Special Delivery", "Floor General", "Post Playmaker", "Triple Threat Juke" };

    private int[] PlaymakingCost1 = { 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000 };
    private int[] PlaymakingCost2 = { 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000 };
    private int[] PlaymakingCost3 = { 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000 };
    private int[] PlaymakingCost4 = { 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000 };

    private string[] Defending = { "Pick Pocket", "Rim Protector", "Pick Dodger", "Chase Down Artist", "Clamps", "Defensive Leader",
    "Interceptor", "Intimidator", "Off-Ball Pest", "Pogo Stick", "Post Lockdown", "Tireless Defender", "Ankle Braces", "Menace",
    "Ball Stripper", "Hustler" };

    private int[] DefendingCost1 = { 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000 };
    private int[] DefendingCost2 = { 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000 };
    private int[] DefendingCost3 = { 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000 };
    private int[] DefendingCost4 = { 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000 };

    private string[] AthleticismRebounding = { "Brick Wall", "Lob City Finisher", "Box", "Rebound Chaser", "Worm" };

    private int[] AthleticismReboundingCost1 = { 1000, 1000, 1000, 1000, 1000 };
    private int[] AthleticismReboundingCost2 = { 2000, 2000, 2000, 2000, 2000 };
    private int[] AthleticismReboundingCost3 = { 4000, 4000, 4000, 4000, 4000 };
    private int[] AthleticismReboundingCost4 = { 8000, 8000, 8000, 8000, 8000 };

    private void ChangeBadgeGroup(int GroupID)
    {
        SelectedGroup = GroupID;
    }

}
