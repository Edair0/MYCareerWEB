@page "/Players"
@using IndexedDB.Blazor
@using MYCareerWEB.Code;
@using MYCareerWEB.Code.PlayerData
@using System.Globalization
@inject IIndexedDbFactory DbFactory

@if (!NewPlayerForm)
{
    <div class="row row-cols-1 row-cols-sm-1 row-cols-md-2 row-cols-lg-2 row-cols-xl-3 g-2">   
        @foreach (Player player in AppData.Players)
        {
            <div class="col">
                <div class="card h-100 text-center">
                    <div class="card-header h-100 d-flex align-items-center justify-content-center border-0">
                        <h5 class="card-title">@player.FullName</h5>
                    </div>
                    <div class="card-body">
                        <p class="card-text">@Positions[player.Position] @String.Format(CultureInfo.InvariantCulture, "{0:0.00}", (float)player.Height / 100)M </p>
                        <p class="card-text">Badges XP: @player.Badges.XP</p>
                        <div class="btn-group d-flex" role="group">
                            <a type="button" href="#" class="btn btn-primary" @onclick="() => SelectPlayer(player)">Select</a>
                            <button type="button" class="btn btn-primary" @onclick="() => DeletePlayer(player)">Delete</button>
                        </div>
                    </div>
                </div>
            </div>
        }        
    </div>
    <div class="row">
        <div class="col gy-2">
            <button class="btn btn-secondary ripple" @onclick="ToggleNewPlayerForm">New Player</button>        
        </div>
    </div> 
}


@if (NewPlayerForm)
{
    <div class="row">
        <div class="col-md-4">
            <div class="form-floating mb-2">
                <input type="text" class="form-control" id="floatingFirstName" placeholder=" " @bind="FullName">
                <label style="color: #d7d7d7" for="floatingFirstName">Full Name</label>
            </div>
        </div>
    </div>
    
    <div class="row">
        <div class="col-md-4">
            <div class="mb-2">
                <select class="form-select" @bind="Position">
                    <option value="0" selected>Position</option>
                    <option value="1">Point Guard</option>
                    <option value="2">Shooting Guard</option>
                    <option value="3">Small Forward</option>
                    <option value="4">Power Forward</option>
                    <option value="5">Center</option>
                </select>
            </div>
            @{ int minimum = 163; int maximum = 231; }
            @if (Position == 1) { minimum = 163; maximum = 201; }
            @if (Position == 2) { minimum = 183; maximum = 206; }
            @if (Position == 3) { minimum = 193; maximum = 211; }
            @if (Position == 4) { minimum = 196; maximum = 213; }
            @if (Position == 5) { minimum = 198; maximum = 231; }
            <div class="mb-2">
                <input type="range" class="form-range" min="@minimum" max="@maximum" step="1" @bind="Height" @bind:event="oninput">
                <label>@String.Format(CultureInfo.InvariantCulture, "{0:0.00}", (float)Height / 100)M</label>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="btn-group mb-3">
            <button class="btn btn-secondary ripple" @onclick="CreatePlayer">Create</button>
            <button class="btn btn-secondary ripple" @onclick="ToggleNewPlayerForm">Cancel</button>
        </div>
    </div>
}


@code {
    private bool NewPlayerForm = false;

    private string FullName = string.Empty;
    private int Position = 0;
    private int Height = 0;

    private string[] Positions = { "Position", "Point Guard", "Shooting Guard", "Small Forward", "Power Forward", "Center" };

    protected override async Task OnInitializedAsync()
    {
        using (var db = await this.DbFactory.Create<AppDB>())
        {
            AppData.Players = db.Players.ToList();
            await db.SaveChanges();
        }
    }

    private async Task CreatePlayer()
    {
        if(FullName != string.Empty && Position != 0)
        {
            Player NewPlayer = AppData.CreatePlayer(FullName, Position, Height);
            using (var db = await DbFactory.Create<AppDB>())
            {       
                db.Players.Add(NewPlayer);
                await db.SaveChanges();
            }
            ToggleNewPlayerForm();
        }
        else
        {

        }
    }

    private async Task DeletePlayer(Player player)
    {
        using (var db = await DbFactory.Create<AppDB>())
        {
            bool removed = db.Players.Remove(player);
            if (removed)
            {
                if (AppData.CurrentPlayer != null && player.Id == AppData.CurrentPlayer.Id)
                {
                    AppData.CurrentPlayer = null;
                }
                AppData.RemovePlayer(player);
            }
            await db.SaveChanges();      
            AppData.RefreshService.CallRequestRefresh();
        }

    }

    private Task SelectPlayer(Player player)
    {
        AppData.CurrentPlayer = player;
        AppData.RefreshService.CallRequestRefresh();
        return Task.CompletedTask;
    }

    private void ToggleNewPlayerForm()
    {
        NewPlayerForm = !NewPlayerForm;
    }

    private void Refresh()
    {
        StateHasChanged();
    }
}
